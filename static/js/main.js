// =====================
// üìÅ MAIN.JS
// –ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥: –∑–∞–≥—Ä—É–∑–∫–∞, —Ñ–∏–ª—å—Ç—Ä—ã, –æ—Ç—Ä–∏—Å–æ–≤–∫–∞, —Ä–æ–ª–∏
// =====================

import {
    renderActivityFilter,
    renderRealityTypeFilter,
    renderRegionTypeFilter,
    restoreFiltersFromURL,
    fetchFilteredApartments,
    resetFilters
} from "./filters.js";
import { renderApartments } from "./apartments.js";
import { showPreloader, hidePreloader, updateApartmentCount, checkRole, showToast, checkTokenOrRedirect  } from "./utils.js";
import { DistrictId } from './constants.js'; // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
import { fetchFavoriteIds } from "./favorites.js";

let allApartments = [];
const limit = 20;

// –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã–∑ —Å —Å–µ—Ä–≤–µ—Ä–∞ 
export async function fetchApartments(favoriteIds, page = 1) {
    try {
        const offset = (page - 1) * limit;
        const url = new URL("apartments/", window.location.origin);
        url.searchParams.set("skip", offset);
        url.searchParams.set("limit", limit);

        const response = await fetch(url);
        const data = await response.json();
        const apartments = data.items;
        const total = data.total;

        // 2. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        // renderActivityFilter(apartments, response);
        // renderRealityTypeFilter(apartments, response);
        // renderRegionTypeFilter(apartments, response);

        //–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: 
        restoreFiltersFromURL();

        renderApartments(apartments, favoriteIds);
        updateApartmentCount(total);
        renderPagination(total, page, favoriteIds); // üëà –¥–æ–±–∞–≤–∏–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        allApartments = apartments;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä:", error);
    }
}



// –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
export function renderPagination(total, currentPage = 1) {
    const totalPages = Math.ceil(total / limit);
    const container = document.getElementById("pagination");
    container.innerHTML = "";

    for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement("button");
        btn.textContent = i;
        btn.classList.add("page-btn");
        if (i === currentPage) btn.classList.add("active");

        btn.addEventListener("click", () => {
            const url = new URL(window.location.href);
            url.searchParams.set("page", i);
            window.history.pushState({}, "", url);

            // üü¢ –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é fetchApartments
            loadApartmentsForPage(i);
        });

        container.appendChild(btn);
    }
}



// –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã: 
async function createFilters() {

    try{
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const response = await fetch("apartments/?skip=0&limit=100000");
        let data = await response.json();
        data = data.items;
        allApartments = data;

        // 2. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        renderActivityFilter(data, response);
        renderRealityTypeFilter(data, response);
        renderRegionTypeFilter(data, response);
    
    } catch{
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä:", error);
    }

}





// –°–ª—É—à–∞–µ–º Select –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∞—è –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è okres
document.getElementById("kraj").addEventListener("change", () => {
    const krajValue = document.getElementById("kraj").value;
    const prahaCheckboxes = document.getElementById("praha-checkboxes");
    const checkboxes = prahaCheckboxes.querySelectorAll("input[type='checkbox']");
    const okresSelect = document.getElementById("okres");

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é Praha-checkboxes
    if (krajValue === "1") {
        prahaCheckboxes.style.opacity = "1";
        prahaCheckboxes.style.pointerEvents = "auto";
    } else {
        prahaCheckboxes.style.opacity = "0";
        prahaCheckboxes.style.pointerEvents = "none";
        checkboxes.forEach(cb => cb.checked = false);
    }

    // –û—á–∏—Å—Ç–∏—Ç—å okres
    okresSelect.innerHTML = '<option value="0">Nez√°le≈æ√≠</option>';

    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å okres, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω St≈ôedoƒçesk√Ω kraj
    if (krajValue === "8") {
        const okresSet = new Set();
        allApartments.forEach(apartment => {
            if (apartment.RegionID == "8" && apartment.DistrictId && DistrictId[apartment.DistrictId]) {
                okresSet.add(apartment.DistrictId);
            }
        });

        Array.from(okresSet).sort((a, b) => {
            return DistrictId[a].localeCompare(DistrictId[b]);
        }).forEach(districtId => {
            const option = document.createElement("option");
            option.value = districtId;
            option.textContent = DistrictId[districtId];
            okresSelect.appendChild(option);
        });
    }
});





// –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞(–°–µ—Ä–≤–µ—Ä)
document.getElementById("filter-btn").addEventListener("click", async () => {
    const favoriteIds = await fetchFavoriteIds();
    fetchFilteredApartments(favoriteIds)
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
document.getElementById("reset-btn").addEventListener("click", async () =>{
    const favoriteIds = await fetchFavoriteIds();
    resetFilters(favoriteIds)
});




// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞):
document.getElementById("adminRegisterBtn").addEventListener("click", () => {
    const token = localStorage.getItem("token");
    if (!token) {
        alert("Chyb√≠ token! P≈ôihla≈°te se nejprve jako administr√°tor.");
        return;
    }

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ cookie
    document.cookie = `token=${token}; path=/`;

    // –ü–µ—Ä–µ–π–¥—ë–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    window.location.href = "/admin/register";
});




//–ö–Ω–æ–ø–∫–∞ logout
document.getElementById('logoutBtn').addEventListener('click', () => {
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    document.cookie = "token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;";
    window.location.href = "/login";
});



// –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ –∂–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ 
document.addEventListener('click', (event) => {
    const target = event.target.closest(".search-btn")

    if(!target) return;

    const phone = target.dataset.telefon;
    const email = target.dataset.email;
    const id = target.dataset.id;

    const params = new URLSearchParams();
    if (phone && phone !== "null") params.append("phone", phone);
    if (email && email !== "null") params.append("email", email);
    if(id && id !== "null") params.append("id", id)

    window.location.href = `/similar?${params.toString()}`;
});



// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ –≤ URL
async function loadApartmentsForPage(page = 1) {
    
    //–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è select –∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –∏–∑ –∫—É–∫–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—Å—è 
    restoreFiltersFromURL();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    const favoriteIds = await fetchFavoriteIds();

    const hasFilters =
        window.location.search.includes("region_id") ||
        window.location.search.includes("activity") ||
        window.location.search.includes("reality_type") ||
        window.location.search.includes("district_id") ||
        window.location.search.includes("prague_id");

    if (hasFilters) {
        await createFilters();
        restoreFiltersFromURL();
        await fetchFilteredApartments(favoriteIds, page);
    } else {
        await createFilters();
        await fetchApartments(favoriteIds, page);
    }
}




// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", async () => {

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    await checkTokenOrRedirect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    checkRole();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
    await loadApartmentsForPage();

    
});
